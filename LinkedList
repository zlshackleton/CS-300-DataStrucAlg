//============================================================================
// Name        : LinkedList.cpp
// Author      : Zach Shack
// Version     : 1.0
// Copyright   : Copyright Â© 2017 SNHU COCE
// Description : Lab 3-3 Lists and Searching
//============================================================================

#include <algorithm>
#include <iostream>
#include <time.h>

#include "CSVparser.hpp"

using namespace std;

//============================================================================
// Global definitions visible to all methods and classes
//============================================================================

// forward declarations
double strToDouble(string str, char ch);

// define a structure to hold bid information
struct Bid {
    string bidId; // unique identifier
    string title;
    string fund;
    double amount;
    Bid() {
        amount = 0.0;
    }
};

//============================================================================
// Linked-List class definition
//============================================================================

/**
 * Define a class containing data members and methods to
 * implement a linked-list.
 */
class LinkedList {

private:
    //Internal structure for list entries, housekeeping variables
    struct Node {
        Bid bid;
        Node* next;

        // default constructor
        Node() {
            next = nullptr;
        }

        // initialize with a bid
        Node(Bid aBid) {
            bid = aBid;
            next = nullptr;
        }
    };

    Node* head;
    Node* tail;
    int size = 0;

public:
    LinkedList();
    virtual ~LinkedList();
    void Append(Bid bid);
    void Prepend(Bid bid);
    void PrintList();
    void Remove(string bidId);
    Bid Search(string bidId);
    int Size();
};

/**
 * Default constructor
 */
LinkedList::LinkedList() {
    // FIXME (1): Initialize housekeeping variables
    //set head and tail equal to null
    head = nullptr;
    tail = nullptr;
    size = 0;
}

/**
 * Destructor
 */
LinkedList::~LinkedList() {
    // start at the head
    Node* current = head;
    Node* temp;

    // loop over each node, detach from list then delete
    while (current != nullptr) {
        temp = current; // hang on to current node
        current = current->next; // make current the next node
        delete temp; // delete the orphan node
    }
}

/**
 * Append a new bid to the end of the list
 */
void LinkedList::Append(Bid bid) {
    // FIXME (2): Implement append logic
    node* newNode = new node; //Create new node
    newNode->data = bid;
    newNode->nextNode = nullptr;

    if (head == nullptr) { //if there is nothing at the head...
        head = newNode; // new node becomes the head and the tail
        tail = newNode;
        ++size;
    }
    else { //else 
        tail->nextNode = newNode; // make current tail node point to the new node
        tail = newNode; // and tail becomes the new node
        ++size; //increase size count
    }
}

/**
 * Prepend a new bid to the start of the list
 */
void LinkedList::Prepend(Bid bid) {
    // FIXME (3): Implement prepend logic
    node* newNode = new node; // Create new node
    newNode->bid = bid;
    newNode->next = nullptr;

    if (head != nullptr) { // if there is already something at the head...
        newNode->next = head; // new node points to current head as its next node
        head = newNode;// head now becomes the new node
        ++size;       //increase size count
    }
}

/**
 * Simple output of all bids in the list
 */
void LinkedList::PrintList() {
    // FIXME (4): Implement print logic
    Node* newNode = head; // start at the head

    while (newNode != nullptr) {// while loop over each node looking for a match
        cout << newNode->bid.bidId; << " "; //output current bidID, title, amount and fund
        cout << newNode->bid.title << " ";
        cout << newNode->bid.amount << " ";
        cout << newNode->bid.fund << " ";

        newNode = newNode->next; //set current equal to next
    }
}

/**
 * Remove a specified bid
 *
 * @param bidId The bid id to remove from the list
 */
void LinkedList::Remove(string bidId) {
    // FIXME (5): Implement remove logic
    if (currentNode == head) { // special case if matching node is the head 		
        head = head->next; // make head point to the next node in the list
        --size; //decrease size count
        return; //return
    }

    Node* currentNode = head; // start at the head
    while (currentNode) { // while loop over each node looking for a match
        if (bidId == currentNode->bid.bidId) { // if the next node bidID is equal to the current bidID                 |currentNode->next.bidId == currentNode->bid.bidId| ??
            temp = currentNode->next; // hold onto the next node temporarily
            currentNode = currentNode->next; // make current node point beyond the next node                           |currentNode = temp->next;| ??
            free(temp); // now free up memory held by temp
            --size; // decrease size count
            return; //return
        }
        currentNode = currentNode->next; // current node is equal to next node


    }
}

/**
 * Search for the specified bidId
 *
 * @param bidId The bid id to search for
 */
Bid LinkedList::Search(string bidId) {
    // FIXME (6): Implement search logic

    if (node == head) { // special case if matching node is the head
        head = head->next; // make head point to the next node in the list
        --size; //decrease size count
        return; //return
    }

    currentNode = head; // start at the head of the list

    while (currentNode->next != nullptr) { // keep searching until end reached with while loop (next != nullptr
        if (currentNode == currentNode->bid.bidId) { // if the current node matches, return it
        else { // else current node is equal to next node
            currentNode = currentNode->next;
        }

        return; //return bid
        }
    }
}

/**
 * Returns the current size (number of elements) in the list
 */
int LinkedList::Size() {
    return size;
}

//============================================================================
// Static methods used for testing
//============================================================================

/**
 * Display the bid information
 *
 * @param bid struct containing the bid info
 */
void displayBid(Bid bid) {
    cout << bid.bidId << ": " << bid.title << " | " << bid.amount
        << " | " << bid.fund << endl;
    return;
}

/**
 * Prompt user for bid information
 *
 * @return Bid struct containing the bid info
 */
Bid getBid() {
    Bid bid;

    cout << "Enter Id: ";
    cin.ignore();
    getline(cin, bid.bidId);

    cout << "Enter title: ";
    getline(cin, bid.title);

    cout << "Enter fund: ";
    cin >> bid.fund;

    cout << "Enter amount: ";
    cin.ignore();
    string strAmount;
    getline(cin, strAmount);
    bid.amount = strToDouble(strAmount, '$');

    return bid;
}
